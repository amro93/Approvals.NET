// <auto-generated />
using System;
using Approvals.NET.Infrastructure.Presistence.EfCore.DbContexts.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Approvals.NET.Infrastructure.Presistence.EfCore.DbContexts.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240928114829_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Approval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovalGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StageId");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApprovalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMet")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalId");

                    b.HasIndex("ConditionId");

                    b.ToTable("ApprovalConditions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequireAllApprovals")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ApprovalGroups");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalGroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApprovalGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ApprovalGroupMembers");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StageOrder")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStages");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DelegateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.ToTable("ApprovalUsers");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConditionExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Escalation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EscalatedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EscalationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OriginalApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EscalatedToId");

                    b.HasIndex("OriginalApproverId");

                    b.HasIndex("RequestId");

                    b.ToTable("Escalations");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentStateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VersionNumber")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("RequestorId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.RequestVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VersionNumber")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestVersions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Transition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FromStateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToStateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Approval", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalGroup", "ApprovalGroup")
                        .WithMany("Approvals")
                        .HasForeignKey("ApprovalGroupId");

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", "Approver")
                        .WithMany("Approvals")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.Group", null)
                        .WithMany("Approvals")
                        .HasForeignKey("GroupId");

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.Request", "Request")
                        .WithMany("Approvals")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalStage", "Stage")
                        .WithMany("Approvals")
                        .HasForeignKey("StageId");

                    b.Navigation("ApprovalGroup");

                    b.Navigation("Approver");

                    b.Navigation("Request");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalCondition", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.Approval", "Approval")
                        .WithMany("ApprovalConditions")
                        .HasForeignKey("ApprovalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.Condition", "Condition")
                        .WithMany("ApprovalConditions")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approval");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalGroupMember", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalGroup", "ApprovalGroup")
                        .WithMany("ApprovalGroupMembers")
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", "User")
                        .WithMany("ApprovalGroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", "Delegate")
                        .WithMany("Delegates")
                        .HasForeignKey("DelegateId");

                    b.Navigation("Delegate");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Escalation", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", "EscalatedTo")
                        .WithMany("EscalatedToEscalations")
                        .HasForeignKey("EscalatedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", "OriginalApprover")
                        .WithMany("OriginalEscalations")
                        .HasForeignKey("OriginalApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.Request", "Request")
                        .WithMany("Escalations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EscalatedTo");

                    b.Navigation("OriginalApprover");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.GroupMember", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Request", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.State", "CurrentState")
                        .WithMany("Requests")
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.RequestVersion", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.Request", "Request")
                        .WithMany("RequestVersions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Transition", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.State", "FromState")
                        .WithMany("FromTransitions")
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Approvals.State", "ToState")
                        .WithMany("ToTransitions")
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FromState");

                    b.Navigation("ToState");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Approvals.NET.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Approvals.NET.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Approval", b =>
                {
                    b.Navigation("ApprovalConditions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalGroup", b =>
                {
                    b.Navigation("ApprovalGroupMembers");

                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalStage", b =>
                {
                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.ApprovalUser", b =>
                {
                    b.Navigation("ApprovalGroupMembers");

                    b.Navigation("Approvals");

                    b.Navigation("Delegates");

                    b.Navigation("EscalatedToEscalations");

                    b.Navigation("GroupMembers");

                    b.Navigation("OriginalEscalations");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Condition", b =>
                {
                    b.Navigation("ApprovalConditions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Group", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.Request", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Escalations");

                    b.Navigation("RequestVersions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Approvals.State", b =>
                {
                    b.Navigation("FromTransitions");

                    b.Navigation("Requests");

                    b.Navigation("ToTransitions");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Approvals.NET.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
